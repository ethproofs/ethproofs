drop trigger if exists "set_machine_id" on "public"."prover_machines";

drop policy "Enable insert for users with an api key" on "public"."prover_machines";

drop policy "Enable read access for all users" on "public"."prover_machines";

revoke delete on table "public"."prover_machines" from "anon";

revoke insert on table "public"."prover_machines" from "anon";

revoke references on table "public"."prover_machines" from "anon";

revoke select on table "public"."prover_machines" from "anon";

revoke trigger on table "public"."prover_machines" from "anon";

revoke truncate on table "public"."prover_machines" from "anon";

revoke update on table "public"."prover_machines" from "anon";

revoke delete on table "public"."prover_machines" from "authenticated";

revoke insert on table "public"."prover_machines" from "authenticated";

revoke references on table "public"."prover_machines" from "authenticated";

revoke select on table "public"."prover_machines" from "authenticated";

revoke trigger on table "public"."prover_machines" from "authenticated";

revoke truncate on table "public"."prover_machines" from "authenticated";

revoke update on table "public"."prover_machines" from "authenticated";

revoke delete on table "public"."prover_machines" from "service_role";

revoke insert on table "public"."prover_machines" from "service_role";

revoke references on table "public"."prover_machines" from "service_role";

revoke select on table "public"."prover_machines" from "service_role";

revoke trigger on table "public"."prover_machines" from "service_role";

revoke truncate on table "public"."prover_machines" from "service_role";

revoke update on table "public"."prover_machines" from "service_role";

alter table "public"."prover_machines" drop constraint "prover_machines_user_id_fkey";

alter table "public"."proofs" drop constraint "proofs_machine_id_fkey";

alter table "public"."proofs" drop constraint "unique_block_machine";

alter table "public"."prover_machines" drop constraint "prover_machines_pkey";

drop index if exists "public"."prover_machines_pkey";

drop index if exists "public"."unique_block_machine";

drop table "public"."prover_machines";

create table "public"."aws_instance_pricing" (
    "id" bigint generated by default as identity not null,
    "instance_type" character varying not null,
    "region" character varying not null,
    "hourly_price" real not null,
    "instance_memory" real not null,
    "vcpu" smallint not null,
    "instance_storage" character varying not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."aws_instance_pricing" enable row level security;

create table "public"."cluster_configurations" (
    "id" bigint generated by default as identity not null,
    "cluster_id" uuid not null,
    "instance_type_id" bigint not null,
    "instance_count" smallint not null
);


alter table "public"."cluster_configurations" enable row level security;

create table "public"."clusters" (
    "cluster_id" smallint,
    "cluster_name" text not null,
    "user_id" uuid not null,
    "id" uuid not null default gen_random_uuid(),
    "cluster_description" text,
    "cluster_hardware" text
);


alter table "public"."clusters" enable row level security;

alter table "public"."proofs" drop column "machine_id";

alter table "public"."proofs" add column "cluster_id" uuid not null;

CREATE UNIQUE INDEX aws_instance_pricing_pkey ON public.aws_instance_pricing USING btree (id);

CREATE UNIQUE INDEX cluster_configurations_pkey ON public.cluster_configurations USING btree (id);

CREATE UNIQUE INDEX prover_machines_pkey ON public.clusters USING btree (id);

CREATE UNIQUE INDEX unique_block_machine ON public.proofs USING btree (block_number, cluster_id);

alter table "public"."aws_instance_pricing" add constraint "aws_instance_pricing_pkey" PRIMARY KEY using index "aws_instance_pricing_pkey";

alter table "public"."cluster_configurations" add constraint "cluster_configurations_pkey" PRIMARY KEY using index "cluster_configurations_pkey";

alter table "public"."clusters" add constraint "prover_machines_pkey" PRIMARY KEY using index "prover_machines_pkey";

alter table "public"."cluster_configurations" add constraint "cluster_configurations_cluster_id_fkey" FOREIGN KEY (cluster_id) REFERENCES clusters(id) not valid;

alter table "public"."cluster_configurations" validate constraint "cluster_configurations_cluster_id_fkey";

alter table "public"."cluster_configurations" add constraint "cluster_configurations_instance_type_id_fkey" FOREIGN KEY (instance_type_id) REFERENCES aws_instance_pricing(id) not valid;

alter table "public"."cluster_configurations" validate constraint "cluster_configurations_instance_type_id_fkey";

alter table "public"."clusters" add constraint "prover_machines_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."clusters" validate constraint "prover_machines_user_id_fkey";

alter table "public"."proofs" add constraint "proofs_machine_id_fkey" FOREIGN KEY (cluster_id) REFERENCES clusters(id) not valid;

alter table "public"."proofs" validate constraint "proofs_machine_id_fkey";

alter table "public"."proofs" add constraint "unique_block_machine" UNIQUE using index "unique_block_machine";

grant delete on table "public"."aws_instance_pricing" to "anon";

grant insert on table "public"."aws_instance_pricing" to "anon";

grant references on table "public"."aws_instance_pricing" to "anon";

grant select on table "public"."aws_instance_pricing" to "anon";

grant trigger on table "public"."aws_instance_pricing" to "anon";

grant truncate on table "public"."aws_instance_pricing" to "anon";

grant update on table "public"."aws_instance_pricing" to "anon";

grant delete on table "public"."aws_instance_pricing" to "authenticated";

grant insert on table "public"."aws_instance_pricing" to "authenticated";

grant references on table "public"."aws_instance_pricing" to "authenticated";

grant select on table "public"."aws_instance_pricing" to "authenticated";

grant trigger on table "public"."aws_instance_pricing" to "authenticated";

grant truncate on table "public"."aws_instance_pricing" to "authenticated";

grant update on table "public"."aws_instance_pricing" to "authenticated";

grant delete on table "public"."aws_instance_pricing" to "service_role";

grant insert on table "public"."aws_instance_pricing" to "service_role";

grant references on table "public"."aws_instance_pricing" to "service_role";

grant select on table "public"."aws_instance_pricing" to "service_role";

grant trigger on table "public"."aws_instance_pricing" to "service_role";

grant truncate on table "public"."aws_instance_pricing" to "service_role";

grant update on table "public"."aws_instance_pricing" to "service_role";

grant delete on table "public"."cluster_configurations" to "anon";

grant insert on table "public"."cluster_configurations" to "anon";

grant references on table "public"."cluster_configurations" to "anon";

grant select on table "public"."cluster_configurations" to "anon";

grant trigger on table "public"."cluster_configurations" to "anon";

grant truncate on table "public"."cluster_configurations" to "anon";

grant update on table "public"."cluster_configurations" to "anon";

grant delete on table "public"."cluster_configurations" to "authenticated";

grant insert on table "public"."cluster_configurations" to "authenticated";

grant references on table "public"."cluster_configurations" to "authenticated";

grant select on table "public"."cluster_configurations" to "authenticated";

grant trigger on table "public"."cluster_configurations" to "authenticated";

grant truncate on table "public"."cluster_configurations" to "authenticated";

grant update on table "public"."cluster_configurations" to "authenticated";

grant delete on table "public"."cluster_configurations" to "service_role";

grant insert on table "public"."cluster_configurations" to "service_role";

grant references on table "public"."cluster_configurations" to "service_role";

grant select on table "public"."cluster_configurations" to "service_role";

grant trigger on table "public"."cluster_configurations" to "service_role";

grant truncate on table "public"."cluster_configurations" to "service_role";

grant update on table "public"."cluster_configurations" to "service_role";

grant delete on table "public"."clusters" to "anon";

grant insert on table "public"."clusters" to "anon";

grant references on table "public"."clusters" to "anon";

grant select on table "public"."clusters" to "anon";

grant trigger on table "public"."clusters" to "anon";

grant truncate on table "public"."clusters" to "anon";

grant update on table "public"."clusters" to "anon";

grant delete on table "public"."clusters" to "authenticated";

grant insert on table "public"."clusters" to "authenticated";

grant references on table "public"."clusters" to "authenticated";

grant select on table "public"."clusters" to "authenticated";

grant trigger on table "public"."clusters" to "authenticated";

grant truncate on table "public"."clusters" to "authenticated";

grant update on table "public"."clusters" to "authenticated";

grant delete on table "public"."clusters" to "service_role";

grant insert on table "public"."clusters" to "service_role";

grant references on table "public"."clusters" to "service_role";

grant select on table "public"."clusters" to "service_role";

grant trigger on table "public"."clusters" to "service_role";

grant truncate on table "public"."clusters" to "service_role";

grant update on table "public"."clusters" to "service_role";

create policy "Enable insert for users with an api key"
on "public"."clusters"
as permissive
for insert
to public
with check (is_allowed_apikey(((current_setting('request.headers'::text, true))::json ->> 'ethkey'::text), '{all,write}'::key_mode[]));


create policy "Enable read access for all users"
on "public"."clusters"
as permissive
for select
to public
using (true);


CREATE TRIGGER set_machine_id BEFORE INSERT ON public.clusters FOR EACH ROW EXECUTE FUNCTION generate_machine_id();

