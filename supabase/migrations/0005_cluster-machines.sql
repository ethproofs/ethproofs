CREATE TABLE "cluster_versions" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "cluster_versions_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"cluster_id" uuid NOT NULL,
	"version" text NOT NULL,
	"description" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
ALTER TABLE "cluster_versions" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
--> statement-breakpoint
CREATE TABLE "machines" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "machines_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"cpu_model" text,
	"cpu_cores" integer,
	"gpu_models" text[],
	"gpu_count" integer[],
  "gpu_memory_gb" integer[],
	"memory_size_gb" integer[],
	"memory_count" integer[],
	"memory_type" text[],
	"storage_size_gb" integer,
	"total_tera_flops" integer,
	"network_between_machines" text,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "machines" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
DROP VIEW "public"."recent_summary";--> statement-breakpoint
DROP VIEW "public"."teams_summary";--> statement-breakpoint
ALTER TABLE "cluster_configurations" RENAME TO "cluster_machines";--> statement-breakpoint
ALTER TABLE "proofs" DROP CONSTRAINT "unique_block_cluster";--> statement-breakpoint
ALTER TABLE "cluster_machines" DROP CONSTRAINT "cluster_configurations_cluster_id_clusters_id_fk";
--> statement-breakpoint
ALTER TABLE "cluster_machines" DROP CONSTRAINT "cluster_configurations_cloud_instance_id_cloud_instances_id_fk";
--> statement-breakpoint
ALTER TABLE "proofs" DROP CONSTRAINT "proofs_cluster_id_clusters_id_fk";
--> statement-breakpoint
ALTER TABLE "cluster_machines" ADD COLUMN "cluster_version_id" bigint;--> statement-breakpoint
ALTER TABLE "cluster_machines" ADD COLUMN "machine_id" bigint;--> statement-breakpoint
ALTER TABLE "cluster_machines" ADD COLUMN "machine_count" smallint;--> statement-breakpoint
ALTER TABLE "proofs" ADD COLUMN "cluster_version_id" bigint;--> statement-breakpoint
ALTER TABLE "cluster_versions" ADD CONSTRAINT "cluster_versions_cluster_id_clusters_id_fk" FOREIGN KEY ("cluster_id") REFERENCES "public"."clusters"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "cluster_machines" ADD CONSTRAINT "cluster_machines_cluster_version_id_cluster_versions_id_fk" FOREIGN KEY ("cluster_version_id") REFERENCES "public"."cluster_versions"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "cluster_machines" ADD CONSTRAINT "cluster_machines_machine_id_machines_id_fk" FOREIGN KEY ("machine_id") REFERENCES "public"."machines"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "cluster_machines" ADD CONSTRAINT "cluster_machines_cloud_instance_id_cloud_instances_id_fk" FOREIGN KEY ("cloud_instance_id") REFERENCES "public"."cloud_instances"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "proofs" ADD CONSTRAINT "proofs_cluster_version_id_cluster_versions_id_fk" FOREIGN KEY ("cluster_version_id") REFERENCES "public"."cluster_versions"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint

-- BEGIN Data migrations

-- 1. For each cluster, create a new cluster_version record and populate it with the default values

INSERT INTO "cluster_versions" ("cluster_id", "version", "description", "created_at")
SELECT "id", 'v1', 'default-autogenerated', "created_at" FROM "clusters";

-- 2. For each cluster_version, update the cluster_machines table with the corresponding cluster_version_id where the cluster_id is the same

UPDATE "cluster_machines"
SET "cluster_version_id" = (
    SELECT "id"
    FROM "cluster_versions"
    WHERE "cluster_id" = "cluster_machines"."cluster_id"
);

-- 3. For each proof, update the cluster_version_id with the corresponding cluster_version_id where the cluster_id is the same

UPDATE "proofs"
SET "cluster_version_id" = (
    SELECT "id"
    FROM "cluster_versions"
    WHERE "cluster_id" = "proofs"."cluster_id"
);

-- END Data migrations

-- Put back NOT NULL constraints
ALTER TABLE "cluster_machines" ALTER COLUMN "cluster_version_id" SET NOT NULL;
ALTER TABLE "proofs" ALTER COLUMN "cluster_version_id" SET NOT NULL;

-- Drop the cluster_id column from cluster_machines
ALTER TABLE "cluster_machines" DROP COLUMN "cluster_id";

-- Drop the cluster_id column from proofs
ALTER TABLE "proofs" DROP COLUMN "cluster_id";

ALTER TABLE "proofs" ADD CONSTRAINT "unique_block_cluster_version" UNIQUE("block_number","cluster_version_id");--> statement-breakpoint
CREATE VIEW "public"."recent_summary" WITH (security_invoker = true) AS (
    SELECT count(DISTINCT b.block_number) AS total_proven_blocks,
      COALESCE(avg(cm.cloud_instance_count::double precision * ci.hourly_price * p.proving_time::double precision / (1000.0 * 60::numeric * 60::numeric)::double precision), 0::numeric::double precision) AS avg_cost_per_proof,
      COALESCE(avg(p.proving_time), 0::numeric) AS avg_proving_time
    FROM blocks b
    INNER JOIN proofs p ON b.block_number = p.block_number AND p.proof_status = 'proved'::text
    INNER JOIN cluster_versions cv ON p.cluster_version_id = cv.id
    INNER JOIN cluster_machines cm ON cv.id = cm.cluster_version_id
    INNER JOIN cloud_instances ci ON cm.cloud_instance_id = ci.id
    WHERE b."timestamp" >= (now() - '30 days'::interval));--> statement-breakpoint
CREATE VIEW "public"."teams_summary" WITH (security_invoker = true) AS (
    SELECT t.id as team_id,
      t.name as team_name,
      t.logo_url,
      COALESCE(sum(cm.cloud_instance_count::double precision * ci.hourly_price * (p.proving_time::numeric / (1000.0 * 60::numeric * 60::numeric))::double precision) / NULLIF(count(p.proof_id), 0)::double precision, 0::double precision) AS avg_cost_per_proof,
      avg(p.proving_time) AS avg_proving_time
    FROM teams t 
    LEFT JOIN proofs p ON t.id = p.team_id AND p.proof_status = 'proved'::text 
    LEFT JOIN cluster_versions cv ON p.cluster_version_id = cv.id
    LEFT JOIN cluster_machines cm ON cv.id = cm.cluster_version_id
    LEFT JOIN cloud_instances ci ON cm.cloud_instance_id = ci.id 
    GROUP BY t.id);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "machines" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for users with an api key" ON "machines" AS PERMISSIVE FOR INSERT TO public;