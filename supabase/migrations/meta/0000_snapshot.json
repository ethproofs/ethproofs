{
  "id": "7ac4860a-2bf5-487f-8329-0da2a63d2d2e",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.api_auth_tokens": {
      "name": "api_auth_tokens",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "mode": {
          "name": "mode",
          "type": "key_mode",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'read'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "token": {
          "name": "token",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "api_auth_tokens_user_id_users_id_fk": {
          "name": "api_auth_tokens_user_id_users_id_fk",
          "tableFrom": "api_auth_tokens",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "api_auth_tokens_token_unique": {
          "name": "api_auth_tokens_token_unique",
          "nullsNotDistinct": false,
          "columns": [
            "token"
          ]
        }
      },
      "policies": {
        "Allow users to see API token entries they own": {
          "name": "Allow users to see API token entries they own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "anon"
          ],
          "using": "is_allowed_apikey(((current_setting('request.headers'::text, true))::json ->> 'ethkey'::text), '{all,read}'::key_mode[])"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.aws_instance_pricing": {
      "name": "aws_instance_pricing",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "aws_instance_pricing_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "instance_type": {
          "name": "instance_type",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "region": {
          "name": "region",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "hourly_price": {
          "name": "hourly_price",
          "type": "real",
          "primaryKey": false,
          "notNull": true
        },
        "instance_memory": {
          "name": "instance_memory",
          "type": "real",
          "primaryKey": false,
          "notNull": true
        },
        "vcpu": {
          "name": "vcpu",
          "type": "smallint",
          "primaryKey": false,
          "notNull": true
        },
        "instance_storage": {
          "name": "instance_storage",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.blocks": {
      "name": "blocks",
      "schema": "",
      "columns": {
        "block_number": {
          "name": "block_number",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "gas_used": {
          "name": "gas_used",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "transaction_count": {
          "name": "transaction_count",
          "type": "smallint",
          "primaryKey": false,
          "notNull": true
        },
        "hash": {
          "name": "hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Enable insert for users with an api key": {
          "name": "Enable insert for users with an api key",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.cluster_configurations": {
      "name": "cluster_configurations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "cluster_configurations_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "cluster_id": {
          "name": "cluster_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "instance_type_id": {
          "name": "instance_type_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "instance_count": {
          "name": "instance_count",
          "type": "smallint",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "cluster_configurations_cluster_id_clusters_id_fk": {
          "name": "cluster_configurations_cluster_id_clusters_id_fk",
          "tableFrom": "cluster_configurations",
          "tableTo": "clusters",
          "columnsFrom": [
            "cluster_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "cluster_configurations_instance_type_id_aws_instance_pricing_id_fk": {
          "name": "cluster_configurations_instance_type_id_aws_instance_pricing_id_fk",
          "tableFrom": "cluster_configurations",
          "tableTo": "aws_instance_pricing",
          "columnsFrom": [
            "instance_type_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Enable insert for users with an api key": {
          "name": "Enable insert for users with an api key",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.clusters": {
      "name": "clusters",
      "schema": "",
      "columns": {
        "index": {
          "name": "index",
          "type": "smallint",
          "primaryKey": false,
          "notNull": false
        },
        "nickname": {
          "name": "nickname",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "hardware": {
          "name": "hardware",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cycle_type": {
          "name": "cycle_type",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "proof_type": {
          "name": "proof_type",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "clusters_user_id_users_id_fk": {
          "name": "clusters_user_id_users_id_fk",
          "tableFrom": "clusters",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Enable insert for users with an api key": {
          "name": "Enable insert for users with an api key",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.programs": {
      "name": "programs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "programs_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "verifier_id": {
          "name": "verifier_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "programs_verifier_id_unique": {
          "name": "programs_verifier_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "verifier_id"
          ]
        }
      },
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Enable insert for users with an api key": {
          "name": "Enable insert for users with an api key",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.proofs": {
      "name": "proofs",
      "schema": "",
      "columns": {
        "proof_id": {
          "name": "proof_id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "proofs_proof_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "2147483647",
            "cache": "1",
            "cycle": false
          }
        },
        "block_number": {
          "name": "block_number",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "proof": {
          "name": "proof",
          "type": "bytea",
          "primaryKey": false,
          "notNull": false
        },
        "proof_status": {
          "name": "proof_status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "proving_cycles": {
          "name": "proving_cycles",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "proved_timestamp": {
          "name": "proved_timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "proving_timestamp": {
          "name": "proving_timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "queued_timestamp": {
          "name": "queued_timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "cluster_id": {
          "name": "cluster_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "proving_time": {
          "name": "proving_time",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "program_id": {
          "name": "program_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "size": {
          "name": "size",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "proofs_block_number_blocks_block_number_fk": {
          "name": "proofs_block_number_blocks_block_number_fk",
          "tableFrom": "proofs",
          "tableTo": "blocks",
          "columnsFrom": [
            "block_number"
          ],
          "columnsTo": [
            "block_number"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "proofs_user_id_users_id_fk": {
          "name": "proofs_user_id_users_id_fk",
          "tableFrom": "proofs",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "proofs_cluster_id_clusters_id_fk": {
          "name": "proofs_cluster_id_clusters_id_fk",
          "tableFrom": "proofs",
          "tableTo": "clusters",
          "columnsFrom": [
            "cluster_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        },
        "proofs_program_id_programs_id_fk": {
          "name": "proofs_program_id_programs_id_fk",
          "tableFrom": "proofs",
          "tableTo": "programs",
          "columnsFrom": [
            "program_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_block_cluster": {
          "name": "unique_block_cluster",
          "nullsNotDistinct": false,
          "columns": [
            "block_number",
            "cluster_id"
          ]
        }
      },
      "policies": {
        "Enable updates for users with an api key": {
          "name": "Enable updates for users with an api key",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "is_allowed_apikey(((current_setting('request.headers'::text, true))::json ->> 'ethkey'::text), '{all,write}'::key_mode[])"
        },
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        },
        "Enable insert for users with an api key": {
          "name": "Enable insert for users with an api key",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {
        "proofs_proof_status_check": {
          "name": "proofs_proof_status_check",
          "value": "proof_status = ANY (ARRAY['queued'::text, 'proving'::text, 'proved'::text])"
        }
      },
      "isRLSEnabled": false
    },
    "public.recursive_root_proofs": {
      "name": "recursive_root_proofs",
      "schema": "",
      "columns": {
        "root_proof_id": {
          "name": "root_proof_id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "recursive_root_proofs_root_proof_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "2147483647",
            "cache": "1",
            "cycle": false
          }
        },
        "block_number": {
          "name": "block_number",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "root_proof": {
          "name": "root_proof",
          "type": "bytea",
          "primaryKey": false,
          "notNull": true
        },
        "root_proof_size": {
          "name": "root_proof_size",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "total_proof_size": {
          "name": "total_proof_size",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "recursive_root_proofs_block_number_blocks_block_number_fk": {
          "name": "recursive_root_proofs_block_number_blocks_block_number_fk",
          "tableFrom": "recursive_root_proofs",
          "tableTo": "blocks",
          "columnsFrom": [
            "block_number"
          ],
          "columnsTo": [
            "block_number"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "recursive_root_proofs_user_id_users_id_fk": {
          "name": "recursive_root_proofs_user_id_users_id_fk",
          "tableFrom": "recursive_root_proofs",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.teams": {
      "name": "teams",
      "schema": "",
      "columns": {
        "team_id": {
          "name": "team_id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "teams_team_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "2147483647",
            "cache": "1",
            "cycle": false
          }
        },
        "team_name": {
          "name": "team_name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "github_org": {
          "name": "github_org",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "logo_url": {
          "name": "logo_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "twitter_handle": {
          "name": "twitter_handle",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website_url": {
          "name": "website_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "teams_user_id_users_id_fk": {
          "name": "teams_user_id_users_id_fk",
          "tableFrom": "teams",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.key_mode": {
      "name": "key_mode",
      "schema": "public",
      "values": [
        "read",
        "write",
        "all",
        "upload"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {
    "public.recent_summary": {
      "columns": {
        "total_proven_blocks": {
          "name": "total_proven_blocks",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "avg_cost_per_proof": {
          "name": "avg_cost_per_proof",
          "type": "double precision",
          "primaryKey": false,
          "notNull": false
        },
        "avg_proving_time": {
          "name": "avg_proving_time",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "SELECT \n\tcount(DISTINCT b.block_number) AS total_proven_blocks, \n\tCOALESCE(avg(cc.instance_count::double precision * a.hourly_price * p.proving_time::double precision / (1000.0 * 60::numeric * 60::numeric)::double precision), 0::numeric::double precision) AS avg_cost_per_proof, \n\tCOALESCE(avg(p.proving_time), 0::numeric) AS avg_proving_time \n\tFROM blocks b \n\tJOIN proofs p ON b.block_number = p.block_number AND p.proof_status = 'proved'::text \n\tJOIN cluster_configurations cc ON p.cluster_id = cc.cluster_id \n\tJOIN aws_instance_pricing a ON cc.instance_type_id = a.id \n\tWHERE b.\"timestamp\" >= (now() - '30 days'::interval)",
      "name": "recent_summary",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.teams_summary": {
      "columns": {
        "team_id": {
          "name": "team_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "team_name": {
          "name": "team_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "logo_url": {
          "name": "logo_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avg_cost_per_proof": {
          "name": "avg_cost_per_proof",
          "type": "double precision",
          "primaryKey": false,
          "notNull": false
        },
        "avg_proving_time": {
          "name": "avg_proving_time",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "SELECT\n\tt.team_id,\n\tt.team_name,\n\tt.logo_url,\n\tCOALESCE(sum(cc.instance_count::double precision * a.hourly_price * (p.proving_time::numeric / (1000.0 * 60::numeric * 60::numeric))::double precision) / NULLIF(count(p.proof_id), 0)::double precision, 0::double precision) AS avg_cost_per_proof,\n\tavg(p.proving_time) AS avg_proving_time\n\tFROM teams t\n\tLEFT JOIN proofs p ON t.user_id = p.user_id AND p.proof_status = 'proved'::text\n\tLEFT JOIN cluster_configurations cc ON p.cluster_id = cc.cluster_id\n\tLEFT JOIN aws_instance_pricing a ON cc.instance_type_id = a.id\n\tGROUP BY t.team_id",
      "name": "teams_summary",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    }
  },
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}