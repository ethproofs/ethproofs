/* eslint-disable @typescript-eslint/no-explicit-any */
import { bn254 } from "@noble/curves/bn254"

// POC: ZKM proof - temporarily copied from https://gist.github.com/paulmillr/194a949ef9658795bc4e8331c3f28e2f

export const zkmJsonVkey = {
  nPublic: 2,
  IC: [
    {
      x: "0x11590282650484566301715500144746794453025561559197120910037949363903919921012",
      y: "0x7240186011313163626428393969053597927325358427138856190449585551638717303978",
    },
    {
      x: "0x16851701958735909727177002414313170429493070482367808819516835198831546341851",
      y: "0x4671176006742483473688334226493308749494496891643522400555743578691957865339",
    },
    {
      x: "0x10297488576560864147262501047860710947275459565465770032438548255715216908509",
      y: "0x8066008377168733143615531753854933596773707140958982340013362294116524105255",
    },
  ],
  vk_alfa_1: {
    x: "0x17884030049888402582930522634680045980218895157770014621228517930841398898320",
    y: "0x2350978535899614821646964216257925583253276541463344259269542551158701289458",
  },
  vk_beta_2: {
    x: [
      "0x1613759499451718303109587803609230044450728271243901381991450140652237262237",
      "0x13176152694427271392344565871597696964044099349335530419158779717146828135094",
    ],
    y: [
      "0x3587653900410715185752588317605019576903016822498886862601803291780076308774",
      "0x20601287378194133768066523789115568200465979402035628035404977132432467357789",
    ],
  },
  vk_gamma_2: {
    x: [
      "0x9367952242408234285221783729033471524940989283006962053225244149428455161273",
      "0x7341692840578528899339734093016329097643365248755296865998285247731552899784",
    ],
    y: [
      "0x5083545727173617485781990103162757481866716430312684043489529868657338510162",
      "0x251757250577192221172663597492175466361299979636670411953274889875873821649",
    ],
  },
  vk_delta_2: {
    x: [
      "0x11321077334858993603431720421195051874886836186661036445267064194511452530572",
      "0x21099203371033535710339183927532133319646558665839856693481984766763470884236",
    ],
    y: [
      "0x10379415104622054804131240163245968089931503228849058778417768370707907929329",
      "0x7040519220923418672760448075965385566691907473046025926221085987998536756747",
    ],
  },
}

// Test proof:
// https://ethproofs.org/block/22243800
export const zkmTestProof = {
  Proof: {
    Ar: {
      X: "7444180274294118328513862113988038857423467820239133105428273854572704040649",
      Y: "5800673926026112466619397373321926642855168929802045806646874523593930156386",
    },
    Krs: {
      X: "10306125183446666193586069091075300208529709036766827815204989162068519343142",
      Y: "11232059559815290821303800742926041825333680078071461695032561042224452827121",
    },
    Bs: {
      X: {
        A0: "6956364706253277748495630231425389827976619043595106103019653284142086435129",
        A1: "14908676840947825778150482882653299531031572522665857113680642020027171063293",
      },
      Y: {
        A0: "1765826308645723359037491453974182996222986819919423053178891186943244239151",
        A1: "6011274782311770861734832915485280006790604458687349221476833410420760249852",
      },
    },
    Commitments: [
      {
        X: "16458452592011275445526241378767917536184609316621334427251318053375806981195",
        Y: "9728138698648523646688447911798346138767951246258444558369491054624300653887",
      },
    ],
    CommitmentPok: {
      X: "13826257919515293920848432401335590982802231186855474579802971460207300598930",
      Y: "16202170717306832271468855065966259786869647860310955314430741451946532938132",
    },
  },
  PublicWitness: [
    "7573946101105442179961903125588369674960614400924563602418012305525884285118",
    "16037312168171050908574221370654481657295969770499911929513849289173877237637",
  ],
}

const num = (str: string) => BigInt(str)
const numx = (str: string) => BigInt(str.slice(2))

// vkey
const xyToG1 = (xy: any) => [xy.x, xy.y].map(numx).concat([BigInt(1)])
const xyToG2 = (xy: any) => [
  [xy.x[0], xy.x[1]].map(numx),
  [xy.y[0], xy.y[1]].map(numx),
  [BigInt(1), BigInt(0)],
]

export const verifyProofInputs = (proof: any) => {
  const { pi_a, pi_b, pi_c } = proof
  const pi_aa = new bn254.G1.ProjectivePoint(
    ...(pi_a as [bigint, bigint, bigint])
  )
  pi_aa.assertValidity()
  const pi_bb = new bn254.G2.ProjectivePoint(
    bn254.fields.Fp2.fromBigTuple(pi_b[0]),
    bn254.fields.Fp2.fromBigTuple(pi_b[1]),
    bn254.fields.Fp2.ONE
  )
  pi_bb.assertValidity()
  const pi_cc = new bn254.G1.ProjectivePoint(
    ...(pi_c as [bigint, bigint, bigint])
  )
  pi_cc.assertValidity()
}

export const prepareVkey = (jsonVkey: any) => {
  const jvk = jsonVkey
  const vkey = {
    nPublic: jvk.nPublic,
    IC: jvk.IC.map((xy: any) => xyToG1(xy)),
    vk_alfa_1: xyToG1(jvk.vk_alfa_1),
    vk_beta_2: xyToG2(jvk.vk_beta_2),
    vk_gamma_2: xyToG2(jvk.vk_gamma_2),
    vk_delta_2: xyToG2(jvk.vk_delta_2),
  }
  return vkey
}

// Old data parser
const XYToG1 = (XY: any) => [XY.X, XY.Y].map(num).concat([BigInt(1)])
const XYToG2 = (XY: any) => [
  [XY.X.A0, XY.X.A1].map(num),
  [XY.Y.A0, XY.Y.A1].map(num),
  [BigInt(1), BigInt(0)],
]

export const prepareProofDataOld = (jsonProof: any) => {
  const jp = jsonProof
  const pi_a = XYToG1(jp.Proof.Ar)
  const pi_b = XYToG2(jp.Proof.Bs)
  const pi_c = XYToG1(jp.Proof.Krs)
  const proof = { protocol: "groth", pi_a, pi_b, pi_c }
  const publicSignals = jp.PublicWitness.map(num)
  verifyProofInputs(proof)
  const commitments = jp.Proof.Commitments.map(XYToG1)
  const proofWithSignals = { proof, publicSignals, commitments }
  return proofWithSignals
}
